BFS..............
#include<bits/stdc++.h>
using namespace std;
#define		pb              push_back
#define		PB              pop_back
#define		nn              "\n"
#define		all(p)          p.begin(),p.end()
#define		zz(v)           v.size()
#define		ss              ' '
#define 	S(a)            scanf("%lld",&a)
#define 	SS(a,b)         scanf("%lld %lld",&a,&b)
#define 	SSS(a,b,c)      scanf("%lld %lld %lld",&a,&b,&c)
#define		gcd(a,b)        __gcd(a,b)
#define		lcm(a,b)        (a*b)/gcd(a,b)
#define		pi              acos(-1.0)
typedef		long long       ll;
typedef		vector<ll>      vll;

vll v[10];
ll visited[10];
ll level[10];

void bfs(ll u){
    visited[u]=1;
    level[u]=0;
    queue<ll>q;
    q.push(u);

    while(!q.empty()){
        u=q.front();
        visited[u]=1;
        printf("pop -> %lld\n",u);
        q.pop();
        visited[u]=1;

        for(ll i=0;i<zz(v[u]);i++){
            ll p=v[u][i];
            if(!visited[p]){
                printf("pushing -> %lld\n",p);
                visited[p]=1;
                level[p]=level[u]+1;
                q.push(p);
            }
        }
    }

}

int main()
{
    ll a,b,c,i,j,t,k,node,edge;
    SS(node,edge);
    for(i=1;i<=edge;i++){
        SS(a,b);
        v[a].pb(b);
        v[b].pb(a);
    }
    printf("\n");
    for(i=1;i<=edge;i++){
        printf("node %lld connected with ->",i);
        for(j=0;j<zz(v[i]);j++)
            printf(" %lld",v[i][j]);
        printf("\n");
    }
    printf("\n");
    bfs(1);

    printf("\n");
    for(i=1;i<node;i++)
        printf("the level of %lld nide is %lld\n",i,level[i]);

    return 0;
}
##############

#############
DFS..............
#include <bits//stdc++.h>
using namespace std;

vector<int> g[128];
bool seen[128];
int n, e;

void dfs(int u)
{
    seen[u] = true;
    printf("%d ", u);
    for(int i = 0; i < g[u].size(); i++) {
        int v = g[u][i];
        if(!seen[v]) dfs(v);
    }
}

int main()
{
    scanf("%d %d", &n, &e);
    for(int i=0; i<e; i++) {
       int u, v;
       cin >> u >> v;
       g[u].push_back(v);
    }
    for(int i=1; i<=n; i++) if(!seen[i]) dfs(i);

    return 0;
}
############

###########
SIEVE...............
bool ar[1000010];
vll v;
void sieve(ll n){
    ll i,j;
    v.pb(2LL);
    for(i=3;i<=n;i+=2){
        if(ar[i]==0){
            v.pb(i);
            if(i>n/i) continue;
            for(j=i*i;j<=n;j+=(i+i)) ar[j]=1;
        }
    }
}

int main(){
//    freopen("input.txt","r",stdin);
    ll a,b,c,i,j,t,k,lie,n,o,x,y,z,ar[200010];
    sieve(100);
    for(i=0;i<zz(v);i++){
        cout<<v[i]<<ss;
    }

    return 0;
}
############

############
CYCLE IN GRAPH................
#include <bits/stdc++.h>
using namespace std;

typedef signed long long ull;
vector<ull>g[100005];
ull vis[100005]= {0},rectree[100005]= {0},ans=1,node=1;

void dfs(ull s)
{
    vis[s]=1;
    for(ull i=0; i<g[s].size(); i++)
    {
        if(rectree[g[s][i]]==1 && ans==1)
        {
            ans=0;
            node=g[s][i];
            return;
        }
        if(vis[g[s][i]]==0)
        {
            rectree[g[s][i]]=1;
            dfs(g[s][i]);
            if(ans==1)
                rectree[g[s][i]]=0;
        }
    }
}
int main()
{
    ull n,m;
    cin>>n>>m;
    for(ull i=0; i<m; i++)
    {
        ull x,y;
        cin>>x>>y;
        g[x].push_back(y);
    }
    for(ull i=1; i<=n; i++)
    {
        rectree[i]=1;
        if(vis[i]==0)
            dfs(i);
        if(ans==0)
        {
            break;
        }
        rectree[i]=0;
    }
    if(ans==0)
    {
        cout<<"CYCLE\n";
        memset(vis,0,sizeof(vis));
        memset(rectree,0,sizeof(rectree));
        ans=1;
        rectree[node]=1;
        dfs(node);
        for(ull i=1; i<=n; i++)
        {
            if(rectree[i]==1)
                cout<<i<<" ";
        }
        cout<<node<<endl;
    }
    else
        cout<<"NO CYCLE\n";
    return 0;
}
#############

############
order of two strings...........
int main()
{
    ll a,b,c,i,j,t,k,lie,m,n,o,p,x,y,z;
    c=0;
    x=0;
    string s1,s2;
    cin>>s1>>s2;
    for(i=0;i<s1.length();i++){
        for(j=x;j<s2.length();j++){
            if(s1[i]==s2[j]){
                c++;
                x=j+1;
                break;
            }
        }
    }
    if(c==s1.length()) cout<<"Yes"<<nn;
    else cout<<"No"<<nn;

    return 0;
}
#########

##########
prime factoraization..............
int main()
{
    ll a,b,c=0,i,j,k,m,n,s=0,o,x,y,z;
    cin>>n;
    for(i=2;i<=n;i++)
    {
        if(n%i==0)
        {
            c=0;
            while(n%i==0)
            {
                n/=i;
                c++;
            }
            cout<<i<<'^'<<c<<ss;
        }
    }
    return 0;
}
###########

##########
topological sort..................
vll v[111];
bool visited[111];
stack<ll>ts;

void dfs(ll u){
    visited[u]=true;
    for(ll i=0;i<zz(v[u]);i++){
        if(!visited[v[u][i]]) dfs(v[u][i]);
    }
    ts.push(u);
}

int main(){
//    freopen("input.txt","r",stdin);
    ll a,b,c,i,j,t,vrtx,edg,k,lie,m,n,o,x,y,z,ar[200010];
    while(SS(edg,vrtx) && vrtx||edg){
        while(vrtx--){
            SS(a,b);
            v[a].pb(b);
        }
        memset(visited,0,sizeof(visited));
        for(i=1;i<=edg;i++){
            if(!visited[i]) dfs(i);
        }
        while(!ts.empty()){
            if(zz(ts)==1) printf("%lld\n",ts.top());
            else printf("%lld ",ts.top());
            ts.pop();
        }
        for(i=0;i<111;i++) v[i].clear();
    }

    return 0;
}
##########

###########
ARGENTINA...............
struct arg{
    string name;
    int attack;
    int defence;
};

bool cmp1(struct arg a,struct arg b){
    if(a.attack!=b.attack) return a.attack>b.attack;
    if(a.attack==b.attack && a.defence!=b.defence) return a.defence<b.defence;
    return a.name<b.name;
}
bool cmp2(struct arg a,struct arg b){
    return a.name<b.name;
}

void output (struct arg team[]){
    int i,j,k=0,l=0;
    cout<<'(';
    for(i=0; i<5; i++){
        if(k==0) cout<<team[i].name;
        else cout<<", "<<team[i].name;
        k++;
    }
    cout<<')'<<nn;
    cout<<'(';
    for(i=5; i<10; i++){
        if(l==0) cout<<team[i].name;
        else cout<<", "<<team[i].name;
        l++;
    }
    cout<<')'<<nn;
}

int main()
{
//    freopen("input.txt","r",stdin);
    int a,b,c=0,i,j,t,k,m,n,o,x,y,z;
    cin>>t;
    while(t--)
    {
        struct arg team[10];
        for(i=0; i<10; i++)
            cin>>team[i].name>>team[i].attack>>team[i].defence;
        printf("Case %d:\n",++c);
        sort(team,team+10,cmp1);
        sort(team,team+5,cmp2);
        sort(team+5,team+10,cmp2);
        output(team);
    }

    return 0;
}
############

############
